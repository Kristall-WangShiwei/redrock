#!/usr/bin/env python

"""
Redrock for DESI
"""
from __future__ import absolute_import, division, print_function

import sys
import numpy as np

import redrock
from redrock.external import desi

import optparse
parser = optparse.OptionParser(usage = "%prog [options] brickfile1 brickfile2...")
parser.add_option("-t", "--templates", type="string",  help="template file or directory")
parser.add_option("-o", "--output", type="string",  help="output file")
parser.add_option("--zbest", type="string",  help="output zbest fits file")
parser.add_option("-n", "--ntargets", type=int,  help="number of targets to process")
parser.add_option("--mintarget", type=int,  help="first target to include", default=0)
parser.add_option("--ncpu", type=int,  help="number of cpu cores for multiprocessing", default=None)
parser.add_option("--debug", help="debug with ipython", action="store_true")

opts, brickfiles = parser.parse_args()

if (opts.output is None) and (opts.zbest is None):
    print('ERROR: --output or --zbest required')
    sys.exit(1)

if len(brickfiles) == 0:
    print('ERROR: must provide input brick files')
    sys.exit(1)

targets = desi.read_bricks(brickfiles)

if opts.ntargets is not None:
    targets = targets[opts.mintarget:opts.mintarget+opts.ntargets]

#- Sanity check on target contents
goodtargets = list()
for tx in targets:
    goodspectra = list()
    for i, spec in enumerate(list(tx.spectra)):
        if np.any(spec.flux != 0.0):
            goodspectra.append(spec)
        else:
            print('WARNING: dropping all-zero spectrum {} from target {}'.format(i, tx.id))

    if len(goodspectra) == 0:
        print('ERROR: no good spectra for target {}'.format(tx.id))
        continue
    elif len(goodspectra) < len(tx.spectra):
        print('INFO: trimming target {} to {}/{} good spectra'.format(
            tx.id, len(goodspectra), len(tx.spectra)) )
        tx.spectra = goodspectra

    goodtargets.append(tx)

targets = goodtargets

templates = redrock.io.read_templates(opts.templates)
results = redrock.zfind(targets, templates, ncpu=opts.ncpu)

if opts.output:
    redrock.io.write_zscan(opts.output, results, clobber=True)

if opts.zbest:
    zbest = redrock.zbest.find_zbest(results)
    desi.write_zbest(opts.zbest, zbest)

if opts.debug:
    import IPython
    IPython.embed()    


